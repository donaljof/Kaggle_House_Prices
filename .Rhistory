data(diamonds)
data(diamond)
data(diamonds)
summary(diamonds)
data(diamonds)
library(ggplot2)
data(diamonds)
dm < - data(diamonds)
dm <- data(diamonds)
ggplot(data = dm, aes(x = dm$carat, y = dm$price) ) +
geom_point(fill = I('red'), color = I('blue') ) +
xlim(0, quantile(dm$carat, 0.99)) +
ylim(0, quantile(dm$price, 0.99))
dm <- data(diamonds)
dm <- diamonds
dm <- diamonds
ggplot(data = dm, aes(x = dm$carat, y = dm$price) ) +
geom_point(fill = I('red'), color = I('blue') ) +
xlim(0, quantile(dm$carat, 0.99)) +
ylim(0, quantile(dm$price, 0.99))
ggplot(data = dm, aes(x = dm$carat, y = dm$price) ) +
geom_point(fill = I('red'), color = I('blue') ) +
xlim(0, quantile(dm$carat, 0.99)) +
ylim(0, quantile(dm$price, 0.99))
ggplot(data = dm, aes(x = dm$carat, y = dm$price) ) +
geom_point(fill = I('red'), color = I('blue'), shape = 21 ) +
xlim(0, quantile(dm$carat, 0.99)) +
ylim(0, quantile(dm$price, 0.99))
ggplot(data = dm, aes(x = dm$carat, y = dm$price) ) +
geom_point(fill = I('red'), color = I('blue'), shape = 21, alpha = 0.5 ) +
xlim(0, quantile(dm$carat, 0.99)) +
ylim(0, quantile(dm$price, 0.99))
ggplot(data = dm, aes(x = dm$carat, y = dm$price) ) +
geom_point(fill = I('red'), color = I('blue'), shape = 21, alpha = 0.5 ) +
xlim(0, quantile(dm$carat, 0.99)) +
ylim(0, quantile(dm$price, 0.99)) +
stat_smooth(method = 'lm')
?stat_smooth
install.packages('scales')
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages('memisc')
install.packages("scales")
install.packages("scales")
getwd()
setwd("C:/Users/Donal/Documents/GitHub/Kaggle_House_Prices")
library(ggplot2)
library(dplyr)
library(tidyr)
test <- read.csv("test.csv", stringsAsFactors = F)
train <- read.csv("train.csv", stringsAsFactors = F)
View(test)
str(train)
library(ggplot2)
library(dplyr)
library(tidyr)
NaN_percent <- train %>% summarise_all(funs(count( is.na())))
train$LotFrontage
is.na(train$LotFrontage)
mean(is.na(train$LotFrontage))
mean(is.na(train$SalePrice))
#create a summary of Na % to identify poor features
?summarise_all()
#create a summary of Na % to identify poor features
summarise_all(funs(mean(is.na())))
#create a summary of Na % to identify poor features
summarise_all(mean(is.na()))
#create a summary of Na % to identify poor features
summarise_all(mean())
#create a summary of Na % to identify poor features
summarise_all(mean
#create a summary of Na % to identify poor features
summarise_all(mean)
#create a summary of Na % to identify poor features
summarise_all(mean)
#create a summary of Na % to identify poor features
summarise_all(funs(mean))\
#create a summary of Na % to identify poor features
summarise_all(funs(mean))
#create a summary of Na % to identify poor features
summarise_all(train, mean())
#create a summary of Na % to identify poor features
summarise_all(train, mean
train)
#create a summary of Na % to identify poor features
summarise_all(train, funs(mean))
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs(mean))
View(nans)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs(mean()))
?funs()
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs(mean()))
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs(mean)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs(mean))
?funs()
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs(mean))
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(., na.rm = TRUE)))
View(nans)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(na.rm = TRUE)))
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(., na.rm = TRUE)))
View(nans)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(is.na(.)))
sdsd
sd
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(is.na(.))))
View(nans)
nans
hist(train$SalePrice)
lowprice <- subset(tran, train$SalePrice < 50000)
lowprice <- subset(train, train$SalePrice < 50000)
View(lowprice)
lowprice <- subset(train, train$SalePrice < 90000)
View(lowprice)
nans
View(nans)
for(col in col(train)){
print(col)
}
for(col in colnames(train)){
print(col)
}
for(column in col(train)){
print(column)
}
for(column in col(nans)){
print(column)
}
for(column in col(nans)){
print(column)
}
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[col])
}
}
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[col], nans[1,column])
}
}
for(column in col(nans)){
print(nans[1,column])
if(nans[1,column] > 0.3){
print(colnames(nans)[col], nans[1,column])
}
}
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(nans[1,column])
}
}
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
library(caret)
install.packages("caret")
library(caret)
View(train)
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
View(test)
test <- read.csv("test.csv", stringsAsFactors = T)
train <- read.csv("train.csv", stringsAsFactors = T)
str(train)
#are there any dud sales proces
mean(is.na(train$SalePrice))
hist(train$SalePrice)
lowprice <- subset(train, train$SalePrice < 90000)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(is.na(.))))
nans
#exclude these cols in any analysis
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
poolarea <- subset(train, train$PoolArea > 0)
View(poolarea)
poolarea$PoolQC
?which
?colSums
install.packages("glmnet")
setwd("C:/Users/Donal/Documents/GitHub/Kaggle_House_Prices")
library(ggplot2)
library(dplyr)
library(tidyr)
library(caret)
test <- read.csv("test.csv", stringsAsFactors = T)
train <- read.csv("train.csv", stringsAsFactors = T)
str(train)
#are there any dud sales proces
mean(is.na(train$SalePrice))
hist(train$SalePrice)
lowprice <- subset(train, train$SalePrice < 90000)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(is.na(.))))
nans
#exclude these cols in any analysis
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
# checking Na pool quality means no pool
poolarea <- subset(train, train$PoolArea > 0)
poolarea$PoolQC
poolarea$PoolQC
ggplot(train, aes(x = LotArea, y = SalePrice)) +
geom_point()
sale_plot <- function(df, xval, color = NULL, facet = NULL){
ggplot(df, aes_string(x = xval, y = "SalePrice", color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'lm') +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train, "LotArea")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice", color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'lm') +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train, "LotArea")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice", color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'lm', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train, "LotArea")
str(train)
sale_plot(train, "YearBuilt")
sale_plot(train, "YearRemodAdd")
for(feature in col(train)){
print(feature)
}
col(train)
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
train["LotArea"]
for(feature in colnames(train)){
print (cor(train["SalePrice"], train[feature]))
}
for(feature in colnames(train)){
print (cor(train["SalePrice"], as.numeric(train[feature])))
}
train$Neighborhood
as.numeric(train$Neighborhood)
sale_plot(train, "Neighborhood")
