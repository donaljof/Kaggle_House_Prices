print(feature[1])
}
#print (cor(train["SalePrice"], as.integer(train[feature[1]])))
}
for(feature in colnames(train)){
print(head(train[feature]))
print(data.class(train[feature]))
if(data.class(train[feature[1]]) == "factor"){
print(feature[1])
}
#print (cor(train["SalePrice"], as.integer(train[feature[1]])))
}
data.class(train["MSZoning"])
sample(train["MSZoning"], 1)
?sample()
sample_n(train["MSZoning"], 1)
type(mple_n(train["MSZoning"], 1))
data.type(mple_n(train["MSZoning"], 1))
data.class(mple_n(train["MSZoning"], 1))
data.class(sample_n(train["MSZoning"], 1))
class(sample_n(train["MSZoning"], 1))
is.factor(train["MSZoning"])
is.factor(sample_n(train["MSZoning"], 1))
is.factor(train$MSZoning)
train["MSZoning"]
train["MSZoning"][1]
train["MSZoning"][1,1]
is.factor(train["MSZoning"][1,1])
is.factor(train["MSZoning"][1,])
is.factor(train["MSZoning"][1])
is.factor(train["MSZoning"][,1])
train["MSZoning"][,1]
is.factor(train["MSZoning"][,1])
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
print(feature[1])
}
#print (cor(train["SalePrice"], as.integer(train[feature[1]])))
}
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
#print (cor(train["SalePrice"], as.integer(train[feature[1]])))
}
str(train)
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print (cor(train["SalePrice"], as.integer(train[feature])))
}
#Converting all factors to integer values and calulating r values
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print (cor(train["SalePrice"][,1], as.integer(train[feature][,1])))
}
#Converting all factors to integer values and calulating r values
corr_table <- data.frame()
corr_table["test"] <- train["SalePrice"][,1]
?data.frame()
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice", color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train, "LotArea")
sale_plot(train, "YearBuilt")
sale_plot(train, "YearRemodAdd")
#Converting all factors to integer values and calulating r values
corr_table <- data.frame()
fisher.test()
corr_table["test"] <- train["SalePrice"][,1]
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(cor(train["SalePrice"][,1],
as.integer(train[feature][,1])))
print(fisher.test(cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(cor(train["SalePrice"][,1],
as.integer(train[feature][,1])))
print(fisher.test(cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(cor(train["SalePrice"][,1],
as.integer(train[feature][,1])))
print(fisher.test(cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(cor(train["SalePrice"][,1],
as.integer(train[feature][,1])))
print(fisher.test(train["SalePrice"][,1],
as.integer(train[feature][,1])))
}
?fisher.test
?t.test
?cor
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1])))
}
?print
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
?cor()
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1])), na.rm = T))
}
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]),
na.rm = T)))
}
?as.integer()
?as.integer
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
train$LotFrontage
unique(train$LotFrontage)
unique(train$PoolQC)
train["PoolQC"][,1]
train["PoolQC"][is.na(),1]
train["PoolQC"][1,1]
na.action(train["PoolQC"][1,1], 0)
?na.action
train$PoolQC[is.na(train$PoolQC),]
train$PoolQC[is.na(train$PoolQC),1]
train$PoolQC[is.na(train$PoolQC)]
train["PoolQC"][is.na(train$PoolQC),1]
train["PoolQC"][,1]
lenght(train["PoolQC"][,1])
length(train["PoolQC"][,1])
length(train["PoolQC"][is.na(train$PoolQC),1])
train["PoolQC"][is.na(train$PoolQC),1]
train["PoolQC"][is.na(train$PoolQC),1] <- 0
train["PoolQC"][is.na(train$PoolQC),1]
train["PoolQC"][,1]
setwd("C:/Users/Donal/Documents/GitHub/Kaggle_House_Prices")
library(ggplot2)
library(dplyr)
library(tidyr)
library(caret)
test <- read.csv("test.csv", stringsAsFactors = T)
train <- read.csv("train.csv", stringsAsFactors = T)
str(train)
#are there any dud sales proces
mean(is.na(train$SalePrice))
hist(train$SalePrice)
lowprice <- subset(train, train$SalePrice < 90000)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(is.na(.))))
nans
#exclude these cols in any analysis
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
# checking Na pool quality means no pool
poolarea <- subset(train, train$PoolArea > 0)
poolarea$PoolQC
#looking at some likely predictive features
ggplot(train, aes(x = LotArea, y = SalePrice)) +
geom_point()
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice", color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train, "LotArea")
sale_plot(train, "YearBuilt")
sale_plot(train, "YearRemodAdd")
sale_plot(train, "Neighborhood")
train["PoolQC"][is.na(train$PoolQC),1]
train["PoolQC"][is.na(train["PoolQC"][,1]),1]
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
train[feature][is.na(train[feature][,1]),1] <- 0
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
unique(train$GarageYrBlt)
str(train)
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
train[feature][is.na(train[feature][,1]),1] <- 0
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
str(train)
unique(train$GarageYrBlt)
sale_plot(train, "GarageYrBlt")
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
train[feature][is.na(train[feature][,1]),1] <- 0
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
setwd("C:/Users/Donal/Documents/GitHub/Kaggle_House_Prices")
library(ggplot2)
library(dplyr)
library(tidyr)
library(caret)
test <- read.csv("test.csv", stringsAsFactors = T)
train <- read.csv("train.csv", stringsAsFactors = T)
str(train)
#are there any dud sales proces
mean(is.na(train$SalePrice))
hist(train$SalePrice)
lowprice <- subset(train, train$SalePrice < 90000)
#create a summary of Na % to identify poor features
nans <- summarise_all(train, funs( mean(is.na(.))))
nans
#exclude these cols in any analysis
for(column in col(nans)){
if(nans[1,column] > 0.3){
print(colnames(nans)[column])
print(nans[1,column])
}
}
# checking Na pool quality means no pool
poolarea <- subset(train, train$PoolArea > 0)
poolarea$PoolQC
#looking at some likely predictive features
ggplot(train, aes(x = LotArea, y = SalePrice)) +
geom_point()
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice", color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
train[feature][is.na(train[feature][,1]),1] <- 0
}
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
sale_plot(train, "MasVnrArea")
sale_plot(train, "LotFrontage")
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
train[feature][is.na(train[feature][,1]),1] <- 0
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
sale_plot(train, "LotFrontage")
sale_plot(train, "LotFrontage")
sale_plot(train, "MasVnrArea")
sale_plot(train, "GarageYrBlt")
sale_plot(train, "LotFrontage")
sale_plot(train, "GarageYrBlt")
#Garage year build is the only mad looking one 0.26
plot(train$GarageYrBlt, train$YearBuilt)
#Garage year build is the only mad looking one 0.26
train_0G <- subset(train, train$GarageYrBlt != 0)
plot(train_0G$GarageYrBlt, train_0G$YearBuilt)
#most of the time this is the same as house age, update to age
train$GarageAge <- train$GarageYrBlt - train$YearBuilt
sale_plot(train, "GarageAge")
#most of the time this is the same as house age, update to age
train$GarageAge <- ifelse(train$GarageYrBlt == 0,
train$YearBuilt,
train$GarageYrBlt - train$YearBuilt)
sale_plot(train, "GarageAge")
sale_plot(train, "YearBuilt")
unique(train$YearBuilt)
unique(train$GarageYrBlt)
unique(train$GarageAge)
max(train$YearBuilt)
e as house age, update to age
train$GarageNewness <- ifelse(train$GarageYrBlt == 0,
0,
train$GarageYrBlt - train$YearBuilt)
sale_plot(train, "GarageNewness")
train$GarageNewness <- ifelse(train$GarageYrBlt == 0,
0,
train$GarageYrBlt - train$YearBuilt)
sale_plot(train, "GarageNewness")
oldgs <- subset(train, train$GarageNewness < 0 )
View(oldgs)
sale_plot(train, "YearBuilt")
#remodelling year could be treated similar
plot(train$YearBuilt, train$YearRemodAdd)
sale_plot(train, "YearBuilt")
sale_plot(train, "YearRemodAdd")
#remodelling year could be treated similar
plot(train$YearBuilt, train$YearRemodAdd)
train$RemoAge <- ifelse(train$YearBuilt == train$YearRemodAdd ||
train$YearRemodAdd == 1950,
2010 - train$YearBuilt,
2010 - train$YearRemodAdd)
plot(train$RemoAge)
train$RemoAge <- ifelse(train$YearBuilt == train$YearRemodAdd,
2010 - train$YearBuilt,
2010 - train$YearRemodAdd)
plot(train$RemoAge)
?or
train$RemoAge <- ifelse(train$YearBuilt == train$YearRemodAdd |
train$YearRemodAdd == 1950,
2010 - train$YearBuilt,
2010 - train$YearRemodAdd)
plot(train$RemoAge)
plot(train$RemoAge, train$YearBuilt)
sale_plot(train "RemoAge")
sale_plot(train, "RemoAge")
?plot
for(feature in colnames(train)){
if(is.factor(train[feature][,1])){
train[feature][,1] <- as.integer(train[feature][,1])
}
train[feature][is.na(train[feature][,1]),1] <- 0
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
for(feature in colnames(train)){
print(paste(feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
View(test)
View(test)
corr_table <- data.frame()
for(feature in colnames(train)){
corr_table[feature, cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))]
}
?data_frame
?data.frame
#rerun the corr code and save as DF
corr_table <- data.frame("Features", "R Value")
View(corr_table)
#rerun the corr code and save as DF
corr_table <- NULL
for(feature in colnames(train)){
rbind(corr_table,
data.frame(features = feature,
r_value = cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))))
}
#rerun the corr code and save as DF
corr_table <- NULL
for(feature in colnames(train)){
r_value = cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))
rbind(corr_table, data.frame(feature, r_value))
}
View(train)
#rerun the corr code and save as DF
corr_table <- NULL
for(feature in colnames(train)){
r_value = cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))
print( (data.frame(feature, r_value)))
rbind(corr_table, data.frame(feature, r_value))
}
#rerun the corr code and save as DF
corr_table <- NULL
for(feature in colnames(train)){
r_value = cor(train["SalePrice"][,1],
as.integer(train[feature][,1]))
print( (data.frame(feature, r_value)))
corr_table <- rbind(corr_table, data.frame(feature, r_value))
}
View(corr_table)
?order_by()
View(corr_table)
arrange(corr_table, r_value)
arrange(corr_table, desc(r_value))
arrange(corr_table, abs(desc(r_value)))
arrange(corr_table, desc(abs(r_value)))
head(corr_table, 10)
corr_table <- arrange(corr_table, desc(abs(r_value)))
head(corr_table, 10)
head(corr_table, 20)
plot(corr_table)
plot(abs(corr_table$r_value))
head(corr_table, 11)
#look at some high r releationships
sale_plot(train, "OverllQual")
#look at some high r releationships
sale_plot(train, "OverallQual")
sale_plot(train, "GrLivArea")
sale_plot(train, "GarageCars")
sale_plot(train, "ExterQual")
sale_plot(train, "GarageArea")
sale_plot(train, "TotalBsmtSF")
sale_plot(train, "X1stFlrSF")
sale_plot(train, "KitchenQual")
sale_plot(train, "FullBath")
sale_plot(train, "TotRmsAbvGrd")
train$TotArea <- train$GrLivArea + train$X1stFlrSF + train$X2ndFlrSF
sale_plot("TotArea")
sale_plot(train,"TotArea")
sale_plot(train,"TotArea", color = "TotRmsAbvGrd")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice",
color = as.factor(color))) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train,"TotArea", color = "TotRmsAbvGrd")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice",
color = as.factor(color))) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train,"TotArea", color = "TotRmsAbvGrd")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
df$color <- as.factor(df$color)
ggplot(df, aes_string(x = xval, y = "SalePrice",
color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train,"TotArea", color = "TotRmsAbvGrd")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
df$color <- as.factor(df$color)
ggplot(df, aes_string(x = xval, y = "SalePrice",
color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
df$color <- as.factor(df$color)
ggplot(df, aes_string(x = xval, y = "SalePrice",
color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train, "LotArea")
sale_plot <- function(df, xval, color = NULL, facet = FALSE){
ggplot(df, aes_string(x = xval, y = "SalePrice",
color = color)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', se = F) +
if(facet){
facet_wrap(~facet)
}
}
sale_plot(train,"TotArea", color = "TotRmsAbvGrd")
